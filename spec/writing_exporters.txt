What is involved in writing an exporter?

Generally, the following pre-processing steps need to be performed on the mesh in order to prepare it for export:
1. Check smoothing groups and seams, break mesh into individual triangles in unsmoothed areas and split edges along seams.
2. Generate triangle tangent-space vectors.  Why triangles?  Because, mathemtatically, normals are undefined at surface discontinuities.  Vertices and edges represent discontinutites in the mesh's surface, meaning that the normals are only truly defined for the triangles/faces of the mesh.
A good resource for this is "Computing Tangent Space Basis Vectors for an Arbitrary Mesh" at http://www.terathon.com/code/tangent.html. The gist of it is that the tangent and bitangent vectors can be found by taking the (approximate) partial derivatives in world-space position with respect to the U- and V- texture coordinates.
3. Split texture verts across tangent-space discontinuities.  These can occur whereever there is a sharp bend or mirrored UV texture coordinates.  The dot product of the tangents and bitangents should be >= 0.0 for all faces that use a given vertex.
4. Average face tangent-space values to calculate the tangent-space for each vertex.  Note that, at this point, normals, tangents, and bitangents are not necessarily unit-length or orthogonal (i.e. they may be skewed).  Using the normal vector as a reference (because it represents smooth surface geometry which is independent of UV-mapping), orthogonalize the tangent, then recalculate the bitangent from the cross-product of the normal and (new) tangent.  Calculate the 'handedness' of the tangent space by taking the dot product of the new and old bitangents.
5. Optionally: Optimize the vertex and triangle lists for caching.  See "Linear-Speed Vertex Cache Optimisation" by Tom Forsyth at http://home.comcast.net/~tom_forsyth/papers/fast_vert_cache_opt.html
This is not yet implemented in the Blender exporter.

The BSM exporter for Blender keeps track of 'geometry verts' and 'texture verts' separately.  There is a one-to-many mapping between a given geometry vert and the texture verts located at the same coordinate, with the same normal.  Geometry verts keep track of world-space coordinates and smoothly-varying normals, while texture coordinates contain information associated with UV-mapping (texture coordinates, tangents, bitangents).  This distinction is made because there may be discontinuities in texture-coordinates or tangent-space bases even across smoothly-varying surface geometry.

Bounding boxes are trivial to compute.  Bounding spheres are a little more involved, and you have two options:
1. Compute the bounding sphere from the bounding box, which is very simple, but produces a very crude bounding sphere.
2. Use a specialized algorithm to compute the minimum bounding sphere.  This is more difficult, but produces much tighter bounding spheres.  The Blender exporter uses a variant of Welzl's algorithm (re-written in an iterative form).

The collision hulls and occlusion mesh are both very simple and should not require significant pre-processing.  Collision hulls are represented as simple point-clouds and can be generated by dumping a vertex list directly from the modelling suite (though small/simple sets with no interior points are preferred).  Likewise, the occlusion mesh does not require significant preprocessing, though it might benefit from the vertex cache optimization mentioned above.

The Blender export script for IQM is a good reference, as it is public domain and BSM is largely influenced by IQM.